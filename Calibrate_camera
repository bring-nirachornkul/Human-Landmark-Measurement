import numpy as np
import cv2
import glob
import os

current_directory = os.getcwd()
print(current_directory)

# Define the chessboard size
chessboard_size = (9,6)  # (rows, columns)

# Termination criteria for the subpixel accuracy
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# Prepare object points, like (0,0,0), (1,0,0), (2,0,0) ..., (6,6,0)
objp = np.zeros((chessboard_size[0] * chessboard_size[1], 3), np.float32)
objp[:, :2] = np.mgrid[0:chessboard_size[0], 0:chessboard_size[1]].T.reshape(-1, 2)

obj_points = []  # 3d points in the real world space
img_points = []  # 2d points in the image plane

# Assuming you have multiple images for calibration stored in 'images'
images = glob.glob('images/*.png')


for fname in images:

    img = cv2.imread(fname)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    ret, corners = cv2.findChessboardCorners(gray, chessboard_size, None)
    if ret:
        obj_points.append(objp)
        corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
        img_points.append(corners2)

ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(obj_points, img_points, gray.shape[::-1], None, None)


# Save the calibration results
output_path = r"D:\Projects\PhD\03 Pose Detection\MultiMatrix.npz"

np.savez(output_path,
         camMatrix=mtx,
         distCoef=dist,
         rVector=rvecs,
         tVector=tvecs)

print(f"Calibration results saved to {output_path}")